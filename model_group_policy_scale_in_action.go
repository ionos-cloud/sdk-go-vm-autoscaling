/*
 * VM Auto Scaling service (CloudAPI)
 *
 * VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.
 *
 * API version: 1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud_vm_autoscaling

import (
	"encoding/json"
)

// GroupPolicyScaleInAction struct for GroupPolicyScaleInAction
type GroupPolicyScaleInAction struct {
	// When `amountType == ABSOLUTE`, this is the number of VMs added or removed in one step. When `amountType == PERCENTAGE`, this is a percentage value, which will be applied to the autoscaling group's current `targetReplicaCount` in order to derive the number of VMs that will be added or removed in one step. There will always be at least one VM added or removed.   For SCALE_IN operation now volumes are NOT deleted after the server deletion.
	Amount     *float32      `json:"amount"`
	AmountType *ActionAmount `json:"amountType"`
	// Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given.
	CooldownPeriod    *string                `json:"cooldownPeriod,omitempty"`
	TerminationPolicy *TerminationPolicyType `json:"terminationPolicy,omitempty"`
}

// NewGroupPolicyScaleInAction instantiates a new GroupPolicyScaleInAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPolicyScaleInAction(amount float32, amountType ActionAmount) *GroupPolicyScaleInAction {
	this := GroupPolicyScaleInAction{}

	this.Amount = &amount

	this.AmountType = &amountType

	var cooldownPeriod string = "5m"
	this.CooldownPeriod = &cooldownPeriod

	return &this
}

// NewGroupPolicyScaleInActionWithDefaults instantiates a new GroupPolicyScaleInAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPolicyScaleInActionWithDefaults() *GroupPolicyScaleInAction {
	this := GroupPolicyScaleInAction{}
	var cooldownPeriod string = "5m"
	this.CooldownPeriod = &cooldownPeriod
	return &this
}

// GetAmount returns the Amount field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *GroupPolicyScaleInAction) GetAmount() *float32 {
	if o == nil {
		return nil
	}

	return o.Amount

}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupPolicyScaleInAction) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}

	return o.Amount, true
}

// SetAmount sets field value
func (o *GroupPolicyScaleInAction) SetAmount(v float32) {

	o.Amount = &v

}

// HasAmount returns a boolean if a field has been set.
func (o *GroupPolicyScaleInAction) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// GetAmountType returns the AmountType field value
// If the value is explicit nil, the zero value for ActionAmount will be returned
func (o *GroupPolicyScaleInAction) GetAmountType() *ActionAmount {
	if o == nil {
		return nil
	}

	return o.AmountType

}

// GetAmountTypeOk returns a tuple with the AmountType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupPolicyScaleInAction) GetAmountTypeOk() (*ActionAmount, bool) {
	if o == nil {
		return nil, false
	}

	return o.AmountType, true
}

// SetAmountType sets field value
func (o *GroupPolicyScaleInAction) SetAmountType(v ActionAmount) {

	o.AmountType = &v

}

// HasAmountType returns a boolean if a field has been set.
func (o *GroupPolicyScaleInAction) HasAmountType() bool {
	if o != nil && o.AmountType != nil {
		return true
	}

	return false
}

// GetCooldownPeriod returns the CooldownPeriod field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GroupPolicyScaleInAction) GetCooldownPeriod() *string {
	if o == nil {
		return nil
	}

	return o.CooldownPeriod

}

// GetCooldownPeriodOk returns a tuple with the CooldownPeriod field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupPolicyScaleInAction) GetCooldownPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.CooldownPeriod, true
}

// SetCooldownPeriod sets field value
func (o *GroupPolicyScaleInAction) SetCooldownPeriod(v string) {

	o.CooldownPeriod = &v

}

// HasCooldownPeriod returns a boolean if a field has been set.
func (o *GroupPolicyScaleInAction) HasCooldownPeriod() bool {
	if o != nil && o.CooldownPeriod != nil {
		return true
	}

	return false
}

// GetTerminationPolicy returns the TerminationPolicy field value
// If the value is explicit nil, the zero value for TerminationPolicyType will be returned
func (o *GroupPolicyScaleInAction) GetTerminationPolicy() *TerminationPolicyType {
	if o == nil {
		return nil
	}

	return o.TerminationPolicy

}

// GetTerminationPolicyOk returns a tuple with the TerminationPolicy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupPolicyScaleInAction) GetTerminationPolicyOk() (*TerminationPolicyType, bool) {
	if o == nil {
		return nil, false
	}

	return o.TerminationPolicy, true
}

// SetTerminationPolicy sets field value
func (o *GroupPolicyScaleInAction) SetTerminationPolicy(v TerminationPolicyType) {

	o.TerminationPolicy = &v

}

// HasTerminationPolicy returns a boolean if a field has been set.
func (o *GroupPolicyScaleInAction) HasTerminationPolicy() bool {
	if o != nil && o.TerminationPolicy != nil {
		return true
	}

	return false
}

func (o GroupPolicyScaleInAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}

	if o.AmountType != nil {
		toSerialize["amountType"] = o.AmountType
	}

	toSerialize["cooldownPeriod"] = o.CooldownPeriod

	if o.TerminationPolicy != nil {
		toSerialize["terminationPolicy"] = o.TerminationPolicy
	}

	return json.Marshal(toSerialize)
}

type NullableGroupPolicyScaleInAction struct {
	value *GroupPolicyScaleInAction
	isSet bool
}

func (v NullableGroupPolicyScaleInAction) Get() *GroupPolicyScaleInAction {
	return v.value
}

func (v *NullableGroupPolicyScaleInAction) Set(val *GroupPolicyScaleInAction) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPolicyScaleInAction) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPolicyScaleInAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPolicyScaleInAction(val *GroupPolicyScaleInAction) *NullableGroupPolicyScaleInAction {
	return &NullableGroupPolicyScaleInAction{value: val, isSet: true}
}

func (v NullableGroupPolicyScaleInAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPolicyScaleInAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
