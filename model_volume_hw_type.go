/*
 * VM Auto Scaling service (CloudAPI)
 *
 * VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.
 *
 * API version: 1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud_vm_autoscaling

import (
	"encoding/json"
	"fmt"
)

// VolumeHwType Storage Type for this replica volume (SSD or HDD).
type VolumeHwType string

// List of VolumeHwType
const (
	HDD          VolumeHwType = "HDD"
	SSD          VolumeHwType = "SSD"
	SSD_PREMIUM  VolumeHwType = "SSD_PREMIUM"
	SSD_STANDARD VolumeHwType = "SSD_STANDARD"
)

func (v *VolumeHwType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VolumeHwType(value)
	for _, existing := range []VolumeHwType{"HDD", "SSD", "SSD_PREMIUM", "SSD_STANDARD"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VolumeHwType", value)
}

// Ptr returns reference to VolumeHwType value
func (v VolumeHwType) Ptr() *VolumeHwType {
	return &v
}

type NullableVolumeHwType struct {
	value *VolumeHwType
	isSet bool
}

func (v NullableVolumeHwType) Get() *VolumeHwType {
	return v.value
}

func (v *NullableVolumeHwType) Set(val *VolumeHwType) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeHwType) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeHwType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeHwType(val *VolumeHwType) *NullableVolumeHwType {
	return &NullableVolumeHwType{value: val, isSet: true}
}

func (v NullableVolumeHwType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeHwType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
