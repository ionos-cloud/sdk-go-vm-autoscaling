/*
 * VM Auto Scaling service (CloudAPI)
 *
 * VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.
 *
 * API version: 1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud_vm_autoscaling

import (
	"encoding/json"
)

// ActionProperties Properties of the resource. Contents depend on the resource type.
type ActionProperties struct {
	ActionStatus *ActionStatus `json:"actionStatus"`
	ActionType   *ActionType   `json:"actionType"`
	// This action is considered successful when the associated autoscaling group reaches this replica count.
	TargetReplicaCount *int64 `json:"targetReplicaCount"`
}

// NewActionProperties instantiates a new ActionProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionProperties(actionStatus ActionStatus, actionType ActionType, targetReplicaCount int64) *ActionProperties {
	this := ActionProperties{}

	this.ActionStatus = &actionStatus

	this.ActionType = &actionType

	this.TargetReplicaCount = &targetReplicaCount

	return &this
}

// NewActionPropertiesWithDefaults instantiates a new ActionProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionPropertiesWithDefaults() *ActionProperties {
	this := ActionProperties{}
	return &this
}

// GetActionStatus returns the ActionStatus field value
// If the value is explicit nil, the zero value for ActionStatus will be returned
func (o *ActionProperties) GetActionStatus() *ActionStatus {
	if o == nil {
		return nil
	}

	return o.ActionStatus

}

// GetActionStatusOk returns a tuple with the ActionStatus field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionProperties) GetActionStatusOk() (*ActionStatus, bool) {
	if o == nil {
		return nil, false
	}

	return o.ActionStatus, true
}

// SetActionStatus sets field value
func (o *ActionProperties) SetActionStatus(v ActionStatus) {

	o.ActionStatus = &v

}

// HasActionStatus returns a boolean if a field has been set.
func (o *ActionProperties) HasActionStatus() bool {
	if o != nil && o.ActionStatus != nil {
		return true
	}

	return false
}

// GetActionType returns the ActionType field value
// If the value is explicit nil, the zero value for ActionType will be returned
func (o *ActionProperties) GetActionType() *ActionType {
	if o == nil {
		return nil
	}

	return o.ActionType

}

// GetActionTypeOk returns a tuple with the ActionType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionProperties) GetActionTypeOk() (*ActionType, bool) {
	if o == nil {
		return nil, false
	}

	return o.ActionType, true
}

// SetActionType sets field value
func (o *ActionProperties) SetActionType(v ActionType) {

	o.ActionType = &v

}

// HasActionType returns a boolean if a field has been set.
func (o *ActionProperties) HasActionType() bool {
	if o != nil && o.ActionType != nil {
		return true
	}

	return false
}

// GetTargetReplicaCount returns the TargetReplicaCount field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *ActionProperties) GetTargetReplicaCount() *int64 {
	if o == nil {
		return nil
	}

	return o.TargetReplicaCount

}

// GetTargetReplicaCountOk returns a tuple with the TargetReplicaCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActionProperties) GetTargetReplicaCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}

	return o.TargetReplicaCount, true
}

// SetTargetReplicaCount sets field value
func (o *ActionProperties) SetTargetReplicaCount(v int64) {

	o.TargetReplicaCount = &v

}

// HasTargetReplicaCount returns a boolean if a field has been set.
func (o *ActionProperties) HasTargetReplicaCount() bool {
	if o != nil && o.TargetReplicaCount != nil {
		return true
	}

	return false
}

func (o ActionProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActionStatus != nil {
		toSerialize["actionStatus"] = o.ActionStatus
	}

	if o.ActionType != nil {
		toSerialize["actionType"] = o.ActionType
	}

	if o.TargetReplicaCount != nil {
		toSerialize["targetReplicaCount"] = o.TargetReplicaCount
	}

	return json.Marshal(toSerialize)
}

type NullableActionProperties struct {
	value *ActionProperties
	isSet bool
}

func (v NullableActionProperties) Get() *ActionProperties {
	return v.value
}

func (v *NullableActionProperties) Set(val *ActionProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableActionProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableActionProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionProperties(val *ActionProperties) *NullableActionProperties {
	return &NullableActionProperties{value: val, isSet: true}
}

func (v NullableActionProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
