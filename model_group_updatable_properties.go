/*
 * VM Auto Scaling service (CloudAPI)
 *
 * VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.
 *
 * API version: 1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud_vm_autoscaling

import (
	"encoding/json"
)

// GroupUpdatableProperties struct for GroupUpdatableProperties
type GroupUpdatableProperties struct {
	// Maximum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.
	MaxReplicaCount *int64 `json:"maxReplicaCount,omitempty"`
	// Minimum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.
	MinReplicaCount *int64 `json:"minReplicaCount,omitempty"`
	// The target number of VMs in this Group. Depending on the scaling policy, this number will be adjusted automatically. VMs will be created or destroyed automatically in order to adjust the actual number of VMs to this number. If targetReplicaCount is given in the request body then it must be >= minReplicaCount and <= maxReplicaCount.
	TargetReplicaCount *int64 `json:"targetReplicaCount,omitempty"`
	// User-defined name for the autoscaling group.
	Name                 *string                `json:"name,omitempty"`
	Policy               *GroupPolicy           `json:"policy,omitempty"`
	ReplicaConfiguration *ReplicaPropertiesPost `json:"replicaConfiguration,omitempty"`
	Datacenter           *Resource              `json:"datacenter,omitempty"`
}

// NewGroupUpdatableProperties instantiates a new GroupUpdatableProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupUpdatableProperties() *GroupUpdatableProperties {
	this := GroupUpdatableProperties{}

	return &this
}

// NewGroupUpdatablePropertiesWithDefaults instantiates a new GroupUpdatableProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupUpdatablePropertiesWithDefaults() *GroupUpdatableProperties {
	this := GroupUpdatableProperties{}
	return &this
}

// GetMaxReplicaCount returns the MaxReplicaCount field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *GroupUpdatableProperties) GetMaxReplicaCount() *int64 {
	if o == nil {
		return nil
	}

	return o.MaxReplicaCount

}

// GetMaxReplicaCountOk returns a tuple with the MaxReplicaCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupUpdatableProperties) GetMaxReplicaCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}

	return o.MaxReplicaCount, true
}

// SetMaxReplicaCount sets field value
func (o *GroupUpdatableProperties) SetMaxReplicaCount(v int64) {

	o.MaxReplicaCount = &v

}

// HasMaxReplicaCount returns a boolean if a field has been set.
func (o *GroupUpdatableProperties) HasMaxReplicaCount() bool {
	if o != nil && o.MaxReplicaCount != nil {
		return true
	}

	return false
}

// GetMinReplicaCount returns the MinReplicaCount field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *GroupUpdatableProperties) GetMinReplicaCount() *int64 {
	if o == nil {
		return nil
	}

	return o.MinReplicaCount

}

// GetMinReplicaCountOk returns a tuple with the MinReplicaCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupUpdatableProperties) GetMinReplicaCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}

	return o.MinReplicaCount, true
}

// SetMinReplicaCount sets field value
func (o *GroupUpdatableProperties) SetMinReplicaCount(v int64) {

	o.MinReplicaCount = &v

}

// HasMinReplicaCount returns a boolean if a field has been set.
func (o *GroupUpdatableProperties) HasMinReplicaCount() bool {
	if o != nil && o.MinReplicaCount != nil {
		return true
	}

	return false
}

// GetTargetReplicaCount returns the TargetReplicaCount field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *GroupUpdatableProperties) GetTargetReplicaCount() *int64 {
	if o == nil {
		return nil
	}

	return o.TargetReplicaCount

}

// GetTargetReplicaCountOk returns a tuple with the TargetReplicaCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupUpdatableProperties) GetTargetReplicaCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}

	return o.TargetReplicaCount, true
}

// SetTargetReplicaCount sets field value
func (o *GroupUpdatableProperties) SetTargetReplicaCount(v int64) {

	o.TargetReplicaCount = &v

}

// HasTargetReplicaCount returns a boolean if a field has been set.
func (o *GroupUpdatableProperties) HasTargetReplicaCount() bool {
	if o != nil && o.TargetReplicaCount != nil {
		return true
	}

	return false
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GroupUpdatableProperties) GetName() *string {
	if o == nil {
		return nil
	}

	return o.Name

}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupUpdatableProperties) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Name, true
}

// SetName sets field value
func (o *GroupUpdatableProperties) SetName(v string) {

	o.Name = &v

}

// HasName returns a boolean if a field has been set.
func (o *GroupUpdatableProperties) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// GetPolicy returns the Policy field value
// If the value is explicit nil, the zero value for GroupPolicy will be returned
func (o *GroupUpdatableProperties) GetPolicy() *GroupPolicy {
	if o == nil {
		return nil
	}

	return o.Policy

}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupUpdatableProperties) GetPolicyOk() (*GroupPolicy, bool) {
	if o == nil {
		return nil, false
	}

	return o.Policy, true
}

// SetPolicy sets field value
func (o *GroupUpdatableProperties) SetPolicy(v GroupPolicy) {

	o.Policy = &v

}

// HasPolicy returns a boolean if a field has been set.
func (o *GroupUpdatableProperties) HasPolicy() bool {
	if o != nil && o.Policy != nil {
		return true
	}

	return false
}

// GetReplicaConfiguration returns the ReplicaConfiguration field value
// If the value is explicit nil, the zero value for ReplicaPropertiesPost will be returned
func (o *GroupUpdatableProperties) GetReplicaConfiguration() *ReplicaPropertiesPost {
	if o == nil {
		return nil
	}

	return o.ReplicaConfiguration

}

// GetReplicaConfigurationOk returns a tuple with the ReplicaConfiguration field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupUpdatableProperties) GetReplicaConfigurationOk() (*ReplicaPropertiesPost, bool) {
	if o == nil {
		return nil, false
	}

	return o.ReplicaConfiguration, true
}

// SetReplicaConfiguration sets field value
func (o *GroupUpdatableProperties) SetReplicaConfiguration(v ReplicaPropertiesPost) {

	o.ReplicaConfiguration = &v

}

// HasReplicaConfiguration returns a boolean if a field has been set.
func (o *GroupUpdatableProperties) HasReplicaConfiguration() bool {
	if o != nil && o.ReplicaConfiguration != nil {
		return true
	}

	return false
}

// GetDatacenter returns the Datacenter field value
// If the value is explicit nil, the zero value for Resource will be returned
func (o *GroupUpdatableProperties) GetDatacenter() *Resource {
	if o == nil {
		return nil
	}

	return o.Datacenter

}

// GetDatacenterOk returns a tuple with the Datacenter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupUpdatableProperties) GetDatacenterOk() (*Resource, bool) {
	if o == nil {
		return nil, false
	}

	return o.Datacenter, true
}

// SetDatacenter sets field value
func (o *GroupUpdatableProperties) SetDatacenter(v Resource) {

	o.Datacenter = &v

}

// HasDatacenter returns a boolean if a field has been set.
func (o *GroupUpdatableProperties) HasDatacenter() bool {
	if o != nil && o.Datacenter != nil {
		return true
	}

	return false
}

func (o GroupUpdatableProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxReplicaCount != nil {
		toSerialize["maxReplicaCount"] = o.MaxReplicaCount
	}

	if o.MinReplicaCount != nil {
		toSerialize["minReplicaCount"] = o.MinReplicaCount
	}

	if o.TargetReplicaCount != nil {
		toSerialize["targetReplicaCount"] = o.TargetReplicaCount
	}

	if o.Name != nil {
		toSerialize["name"] = o.Name
	}

	if o.Policy != nil {
		toSerialize["policy"] = o.Policy
	}

	if o.ReplicaConfiguration != nil {
		toSerialize["replicaConfiguration"] = o.ReplicaConfiguration
	}

	if o.Datacenter != nil {
		toSerialize["datacenter"] = o.Datacenter
	}

	return json.Marshal(toSerialize)
}

type NullableGroupUpdatableProperties struct {
	value *GroupUpdatableProperties
	isSet bool
}

func (v NullableGroupUpdatableProperties) Get() *GroupUpdatableProperties {
	return v.value
}

func (v *NullableGroupUpdatableProperties) Set(val *GroupUpdatableProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupUpdatableProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupUpdatableProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupUpdatableProperties(val *GroupUpdatableProperties) *NullableGroupUpdatableProperties {
	return &NullableGroupUpdatableProperties{value: val, isSet: true}
}

func (v NullableGroupUpdatableProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupUpdatableProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
