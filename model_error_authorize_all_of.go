/*
 * VM Auto Scaling service (CloudAPI)
 *
 * VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.
 *
 * API version: 1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud_vm_autoscaling

import (
	"encoding/json"
)

// ErrorAuthorizeAllOf struct for ErrorAuthorizeAllOf
type ErrorAuthorizeAllOf struct {
	HttpStatus *int32                   `json:"httpStatus,omitempty"`
	Messages   *[]ErrorAuthorizeMessage `json:"messages,omitempty"`
}

// NewErrorAuthorizeAllOf instantiates a new ErrorAuthorizeAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorAuthorizeAllOf() *ErrorAuthorizeAllOf {
	this := ErrorAuthorizeAllOf{}

	return &this
}

// NewErrorAuthorizeAllOfWithDefaults instantiates a new ErrorAuthorizeAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorAuthorizeAllOfWithDefaults() *ErrorAuthorizeAllOf {
	this := ErrorAuthorizeAllOf{}
	return &this
}

// GetHttpStatus returns the HttpStatus field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ErrorAuthorizeAllOf) GetHttpStatus() *int32 {
	if o == nil {
		return nil
	}

	return o.HttpStatus

}

// GetHttpStatusOk returns a tuple with the HttpStatus field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorAuthorizeAllOf) GetHttpStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return o.HttpStatus, true
}

// SetHttpStatus sets field value
func (o *ErrorAuthorizeAllOf) SetHttpStatus(v int32) {

	o.HttpStatus = &v

}

// HasHttpStatus returns a boolean if a field has been set.
func (o *ErrorAuthorizeAllOf) HasHttpStatus() bool {
	if o != nil && o.HttpStatus != nil {
		return true
	}

	return false
}

// GetMessages returns the Messages field value
// If the value is explicit nil, the zero value for []ErrorAuthorizeMessage will be returned
func (o *ErrorAuthorizeAllOf) GetMessages() *[]ErrorAuthorizeMessage {
	if o == nil {
		return nil
	}

	return o.Messages

}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorAuthorizeAllOf) GetMessagesOk() (*[]ErrorAuthorizeMessage, bool) {
	if o == nil {
		return nil, false
	}

	return o.Messages, true
}

// SetMessages sets field value
func (o *ErrorAuthorizeAllOf) SetMessages(v []ErrorAuthorizeMessage) {

	o.Messages = &v

}

// HasMessages returns a boolean if a field has been set.
func (o *ErrorAuthorizeAllOf) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

func (o ErrorAuthorizeAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HttpStatus != nil {
		toSerialize["httpStatus"] = o.HttpStatus
	}

	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}

	return json.Marshal(toSerialize)
}

type NullableErrorAuthorizeAllOf struct {
	value *ErrorAuthorizeAllOf
	isSet bool
}

func (v NullableErrorAuthorizeAllOf) Get() *ErrorAuthorizeAllOf {
	return v.value
}

func (v *NullableErrorAuthorizeAllOf) Set(val *ErrorAuthorizeAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorAuthorizeAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorAuthorizeAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorAuthorizeAllOf(val *ErrorAuthorizeAllOf) *NullableErrorAuthorizeAllOf {
	return &NullableErrorAuthorizeAllOf{value: val, isSet: true}
}

func (v NullableErrorAuthorizeAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorAuthorizeAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
