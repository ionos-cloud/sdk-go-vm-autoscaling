/*
 * VM Auto Scaling service (CloudAPI)
 *
 * VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.
 *
 * API version: 1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud_vm_autoscaling

import (
	"encoding/json"
	"fmt"
)

// ActionAmount The type of the given amount.
type ActionAmount string

// List of ActionAmount
const (
	ABSOLUTE   ActionAmount = "ABSOLUTE"
	PERCENTAGE ActionAmount = "PERCENTAGE"
)

func (v *ActionAmount) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActionAmount(value)
	for _, existing := range []ActionAmount{"ABSOLUTE", "PERCENTAGE"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActionAmount", value)
}

// Ptr returns reference to ActionAmount value
func (v ActionAmount) Ptr() *ActionAmount {
	return &v
}

type NullableActionAmount struct {
	value *ActionAmount
	isSet bool
}

func (v NullableActionAmount) Get() *ActionAmount {
	return v.value
}

func (v *NullableActionAmount) Set(val *ActionAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableActionAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableActionAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionAmount(val *ActionAmount) *NullableActionAmount {
	return &NullableActionAmount{value: val, isSet: true}
}

func (v NullableActionAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
