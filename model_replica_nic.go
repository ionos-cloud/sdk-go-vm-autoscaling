/*
 * VM Auto Scaling service (CloudAPI)
 *
 * VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.
 *
 * API version: 1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud_vm_autoscaling

import (
	"encoding/json"
)

// ReplicaNic struct for ReplicaNic
type ReplicaNic struct {
	// Lan ID for this replica Nic.
	Lan *int32 `json:"lan"`
	// Name for this replica NIC.
	Name *string `json:"name"`
	// Dhcp flag for this replica Nic. This is an optional attribute with default value of 'true' if not given in the request payload or given as null.
	Dhcp *bool `json:"dhcp,omitempty"`
}

// NewReplicaNic instantiates a new ReplicaNic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicaNic(lan int32, name string) *ReplicaNic {
	this := ReplicaNic{}

	this.Lan = &lan

	this.Name = &name

	return &this
}

// NewReplicaNicWithDefaults instantiates a new ReplicaNic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicaNicWithDefaults() *ReplicaNic {
	this := ReplicaNic{}
	return &this
}

// GetLan returns the Lan field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ReplicaNic) GetLan() *int32 {
	if o == nil {
		return nil
	}

	return o.Lan

}

// GetLanOk returns a tuple with the Lan field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicaNic) GetLanOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return o.Lan, true
}

// SetLan sets field value
func (o *ReplicaNic) SetLan(v int32) {

	o.Lan = &v

}

// HasLan returns a boolean if a field has been set.
func (o *ReplicaNic) HasLan() bool {
	if o != nil && o.Lan != nil {
		return true
	}

	return false
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ReplicaNic) GetName() *string {
	if o == nil {
		return nil
	}

	return o.Name

}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicaNic) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Name, true
}

// SetName sets field value
func (o *ReplicaNic) SetName(v string) {

	o.Name = &v

}

// HasName returns a boolean if a field has been set.
func (o *ReplicaNic) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// GetDhcp returns the Dhcp field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *ReplicaNic) GetDhcp() *bool {
	if o == nil {
		return nil
	}

	return o.Dhcp

}

// GetDhcpOk returns a tuple with the Dhcp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicaNic) GetDhcpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}

	return o.Dhcp, true
}

// SetDhcp sets field value
func (o *ReplicaNic) SetDhcp(v bool) {

	o.Dhcp = &v

}

// HasDhcp returns a boolean if a field has been set.
func (o *ReplicaNic) HasDhcp() bool {
	if o != nil && o.Dhcp != nil {
		return true
	}

	return false
}

func (o ReplicaNic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Lan != nil {
		toSerialize["lan"] = o.Lan
	}

	if o.Name != nil {
		toSerialize["name"] = o.Name
	}

	toSerialize["dhcp"] = o.Dhcp

	return json.Marshal(toSerialize)
}

type NullableReplicaNic struct {
	value *ReplicaNic
	isSet bool
}

func (v NullableReplicaNic) Get() *ReplicaNic {
	return v.value
}

func (v *NullableReplicaNic) Set(val *ReplicaNic) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaNic) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaNic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaNic(val *ReplicaNic) *NullableReplicaNic {
	return &NullableReplicaNic{value: val, isSet: true}
}

func (v NullableReplicaNic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaNic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
