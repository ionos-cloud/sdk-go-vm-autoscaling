/*
 * VM Auto Scaling service (CloudAPI)
 *
 * VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.  Create an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.  When target replica count is specified, Auto Scaling will maintain the set number on instances.  When scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.
 *
 * API version: 1.0
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud_vm_autoscaling

import (
	"encoding/json"
)

// GroupEntities struct for GroupEntities
type GroupEntities struct {
	Actions *ActionCollection `json:"actions,omitempty"`
	Servers *ServerCollection `json:"servers,omitempty"`
}

// NewGroupEntities instantiates a new GroupEntities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupEntities() *GroupEntities {
	this := GroupEntities{}

	return &this
}

// NewGroupEntitiesWithDefaults instantiates a new GroupEntities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupEntitiesWithDefaults() *GroupEntities {
	this := GroupEntities{}
	return &this
}

// GetActions returns the Actions field value
// If the value is explicit nil, the zero value for ActionCollection will be returned
func (o *GroupEntities) GetActions() *ActionCollection {
	if o == nil {
		return nil
	}

	return o.Actions

}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupEntities) GetActionsOk() (*ActionCollection, bool) {
	if o == nil {
		return nil, false
	}

	return o.Actions, true
}

// SetActions sets field value
func (o *GroupEntities) SetActions(v ActionCollection) {

	o.Actions = &v

}

// HasActions returns a boolean if a field has been set.
func (o *GroupEntities) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// GetServers returns the Servers field value
// If the value is explicit nil, the zero value for ServerCollection will be returned
func (o *GroupEntities) GetServers() *ServerCollection {
	if o == nil {
		return nil
	}

	return o.Servers

}

// GetServersOk returns a tuple with the Servers field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupEntities) GetServersOk() (*ServerCollection, bool) {
	if o == nil {
		return nil, false
	}

	return o.Servers, true
}

// SetServers sets field value
func (o *GroupEntities) SetServers(v ServerCollection) {

	o.Servers = &v

}

// HasServers returns a boolean if a field has been set.
func (o *GroupEntities) HasServers() bool {
	if o != nil && o.Servers != nil {
		return true
	}

	return false
}

func (o GroupEntities) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}

	if o.Servers != nil {
		toSerialize["servers"] = o.Servers
	}

	return json.Marshal(toSerialize)
}

type NullableGroupEntities struct {
	value *GroupEntities
	isSet bool
}

func (v NullableGroupEntities) Get() *GroupEntities {
	return v.value
}

func (v *NullableGroupEntities) Set(val *GroupEntities) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupEntities) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupEntities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupEntities(val *GroupEntities) *NullableGroupEntities {
	return &NullableGroupEntities{value: val, isSet: true}
}

func (v NullableGroupEntities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupEntities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
